from flask import Flask, request
from jinja2 import Template

app = Flask(name)

@app.route("/page")
def page():
    name = request.values.get('name')
    age = request.values.get('age', 'unknown')
    output = Template('Hello ' + name + '! Your age is ' + age + '.').render()  # Уязвимость
return output

if name == "main":
    app.run(debug=True)



"""
Уязвимости в коде:
    Использование небезопасного конкатенации строк для формирования HTML-страницы. Это может привести к XSS (межсайтовому скриптингу).

Строки с уязвимостями:
    Строка 10: 
    output = Template('Hello ' + name + '! Your age is ' + age + '.').render()

Последствия эксплуатации уязвимостей:
    Злоумышленник может внедрить вредоносный JavaScript код или другие опасные сценарии в страницу, которая будет выполнена на компьютере пользователя, посетившего эту страницу. Это может привести например к краже cookie пользователей и другим атакам.

Способы исправления уязвимостей:
    1) Использовать безопасные методы форматирования строк, такие как шаблоны или строковый метод format().
    2) Экранировать специальные символы HTML в пользовательском вводе перед выводом на страницу.

Выбор лучшего способа исправления:
    Лучшим способом исправления уязвимости является использование безопасных методов форматирования строк с экранированием HTML символов в пользовательском вводе. Это предотвратит возможность выполнения вредоносного кода на стороне клиента и обеспечит безопасность приложения.

Исправление:
def page():
    name = escape(request.values.get('name'))
    age = escape(request.values.get('age', 'unknown'))
    output = 'Hello {}! Your age is {}.'.format(name, age)
    return output
    В этом исправлении мы использовали метод escape() для экранирования специальных символов HTML в пользовательском вводе. Также мы заменили конкатенацию строк на безопасный метод форматирования строк format(), что устраняет уязвимость XSS.
"""
